name: Ollama Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  Deploy-Ollama:
    runs-on: ubuntu-latest
    name: Deploy Ollama Service

    steps:
      - name: Configure SSH for Ollama
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_OLLAMA_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          cat > ~/.ssh/config << EOF
          Host ollama
              HostName $EC2_HOST
              User $EC2_USERNAME
              IdentityFile ~/.ssh/private_key
              StrictHostKeyChecking no
          EOF

      - name: Upload and Run deploy_ollama.sh
        run: |
          scp -o StrictHostKeyChecking=no deploy_ollama.sh ollama:~/deploy_ollama.sh
          ssh ollama "bash ~/deploy_ollama.sh"


  Deploy-App:
    runs-on: ubuntu-latest
    name: Deploy App (Flask/Web)

    needs: Deploy-Ollama

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH for App EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          cat > ~/.ssh/config << EOF
          Host app
              HostName $EC2_HOST
              User $EC2_USERNAME
              IdentityFile ~/.ssh/private_key
              StrictHostKeyChecking no
          EOF

      - name: Clone or Pull Repo on App EC2
        run: |
          ssh app "if [ -d ~/${REPO_NAME} ]; then cd ~/${REPO_NAME} && git pull origin main; else git clone ${REPO_URL} ~/${REPO_NAME}; fi"

      - name: Run deploy_app.sh
        run: |
          ssh app "cd ~/${REPO_NAME} && bash deploy_app.sh"
